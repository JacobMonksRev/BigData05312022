MongoDB Notes

We talked about MySQL as Relational (RDBMS)
Mongo is a NoSQL
    - non SQL
    - not only SQL
    - not Relational
    - Mongo allows us to organize unstructured data as well as structured.

NoSQL allows us to organize wide variety of data.
    - Distributed, servers don't have a single point of failure, data is kept in multiple locations
    - Scalable, data storage can expand based on what is needed
        - Horizontally scalable, which means that increasing capacity just means using more servers
    - High performance querying
    - Large throughput
    - Allows for data clustering across multiple machines.
    - Does not have ACID properties.

Mongo
    - document based NoSQL
    Terminology:
    MySQL           Mongo
    Databse         Database
    Table           Collection
    Row/Record      Document
    Column          Field
    Join            Embedding Documents
    Primary Key     Primary Key
    - A document consists of key-value pairs

    Datatypes:
    - Most important to remember
        String
        Int
        Float
        Double
        Long
        Boolean
        ObjectID
    Null
    Binary Data
    Symbol
    JavaScript
    Regular Expression

Example:
{
    first_name:"John",
    last_name:"Johnson",
    cell:"1234567890",
    city:"Los Angeles",
    date:"01-01-2022"
}

    This is generally called JSON Format, fields and values separated by colons.

    Sharding:
        Storing data across multiple machines to meet the demands of big data.
        Increases the memory and processing capability of the server through horizontal scaling.
        Mongo's approach to increasing data throughput and efficiency.

CRUD Operations:

C- Create
    > show dbs
    > use db_name (can also create a new database if the name doesn't yet exist)
    > db.createCollection("CollectionName")
    > show collections

    >db.CollectionName.insertOne({})
    >db.CollectionName.insertMany([{}])

    The {} identify the info that goes into a document
    When inserting multiple documents, be sure to use [] because it is a list of documents

R - Read
    > db.CollectionName.find()      - gives you object IDs with info
    > db.CollectionName.find().pretty()     -prints out the info more cleanly
    find() is Mongo's version of SELECT

    In the find() you indicate what your search criteria is.
    - query for multiple specific fields/values
        db.CollectionName.find({first_name:"Name", last_name:"Name"})
    - query with $or to search for documents that satisfy either condition
        db.CollectionName.find({$or: [{first_name:"Name"},{last_name:"Name"}]})
    - query for fields with vlaues greater/less than a value
        db.CollectionName.find({age: {$lt: 30}})
    - query for values that exist in a given list of values
        db.CollectionName.find({field: {$in: [value1, value2]}})
    - query for documents using Regex
        db.CollectionName.find({field: {$regex: 'pattern', $options 'option'}})
    - query for documents that that DO NOT follow a condition
        db.CollectionName.find({first_name: {$not: "Name"}})

U - Update
    updateOne(), updateMany()
    > db.CollectionName.updateOne({first_name:"Name"},{$set: {last_name:"Name2"}})
    - You can use update to insert new fields into documents that weren't there before.

    updateOne() will only change the first document it finds.
    updateMany() will change all documents that fit the criteria.

D - Delete
    deleteOne(), deleteMany()
    > db.CollectionName.deleteOne({first_name:"Name"})

    To delete everything from the collection:
    > db.CollectionName.deleteMany({})

Embedding Documents:
    Functions in a similar way to MySQL Joins.
    Taking information from one document and placing it directly into another.
    Increases efficiency.
    Use it when data that relates to each other frequently needs to be used together.
    Embed a document just like you would create a list []

    Example:
    {
    first_name:"John",
    last_name:"Johnson",
    cell:"1234567890",
    city:"Los Angeles",
    profession:["banking","finance","trader"],
    cars: [
        {
            model:"Charger"
            year:2007
        },
        {
            model:"Mustang",
            year:1970
        }
    ],
    date:"01-01-2022"
    }

Primary Keys:
    Mongo is not relational, Primary Keys are not necessary to create relations
    Instead, Mongo just has the Embedded Documents.
    However, Primary Keys still ensure that documents are uniquely identified.
    Makes querying much easier.

    Primary Keys in Mongo are done using "_id" field.
    Mongo will automatically create these if you do not declare them explicitly.
    _id is 12 bytes of data"
        4 - bytes timestamp data, to note the time of creation
        5 - bytes are a random value
        3 - bytes are a counter that ticks based on the random value
    These random numbers mean the _id field is *most likely* unique.

    If you don't want Mongo to create _id automatically, you must define it explicitly.
    _id is an immutable field, it cannot be changed using updateOne() or updateMany()

pyMongo:
    Connecting your MongoDB server to a Python application.
    https://pypi.org/project/pymongo/

    from pymongo import MongoClient

Regex:
- Works similar to MySQL.
- Pattern matching in the documents.
- Create a Regular Expression for fields in the document to match.

db.CollectionName.find( { field: {$regex: 'expression', $options: 'option'} } )

- Four options:
    1. 'i' - ignore case sensitivity
    2. 'm' - match strings with multi-line values (\n)
    3. 'x' - ignores whitespace or any characters enclosed in comments (#)
    4. 's' - allows the dot character '.' to match all characters including newlines.

Ex.
db.CollectionName.find( { field: {$regex: 'string', $options: 'i'} } ) #contains this string
db.CollectionName.find( { field: {$regex: '^[ABC]', $options: 'i'} } ) #start with these letters
db.CollectionName.find( { field: {$regex: '[ABC]$', $options: 'i'} } ) #ends with these letters

Dropping Collections:
- Delete is the keyword for documents
- Drop is the keyword for collections

db.CollectionName.drop()

Dropping Fields:
- Like dropping a column in MySQL

db.CollectionName.updateOne({field:value}, {$unset: {field:1}})

- You cannot unset an _id field

Limit:
- limit the number of records / documents that are returned.

db.CollectionName.find().limit(# of documents returned).pretty()

Sort:
- works like ORDER BY in MySQL
- order the records by the value of a field in either ascending or descending order.

db.CollectionName.find().sort({field:(1/-1)}).pretty()
- use 1 for ascending order
- use -1 for descending order

If a document doesn't have the field you sort by:
    - They get thrown on the bottom of the order if descending order.
    - They get thrown on the top of the order if ascending order.

Aggregates:
- Aggregates are harder to use and less practical in Mongo compared to MySQL
- This is because of the flexible structure of documents

db.CollectionName.aggregate({$group: {_id: '', field:{$agg: "$field"}}})
- Functions:
    $sum
    $avg
    $max
    $min
    $first  #equally achieved by ascending/descending and then limit 1
    $last

- if a document doesn't have the field being aggregated, it will not be accounted for in the aggregation.

Index:
- Makes searching for records faster and easier.
- Put an index on a column / field in order to create binary tree diagram to more easily get queries.
- takes up more space, slower writing.

db.CollectionName.createIndex({field:1}, {name: "Name of Index"})

- use indexing on larger collections with documents that have a lot of similar data.

BASE:
    Basically Available - anyone can obtain the data if they request it.
    Soft state - describes the interval where changes are to be made to the data.
    Eventually consistent - after all necessry have been made, the data becomes consistent.

    Alternative approach to data systems design from ACID.
    ACID values the consistency and integrity of data, BASE prioritizes Availability.

    Mongo uses sharding and replication to obtain High Availability
    - Sharding is splitting the data into shards and distributing it across servers
    - Replication is taking the data in a server and making replica sets.
    - Any client on the server who requests the data will receive it.

    The idea is that the data can be resolved or fixed at a later time due to Mongo's flexibility.

MySQL vs MongoDB:
                        |   MySQL:             |   MongoDB:
------------------------+----------------------+-------------------------------
Data Representation:    | Records organized    | JSON documents
                        | into columns         |
------------------------+----------------------+-------------------------------
Schema:                 | Define schema in     | No defined schema
                        | table creation       |
------------------------+----------------------+-------------------------------
Types of Data:          | Structured only      | Structured, semi-structured,
                        |                      | and unstructured
------------------------+----------------------+-------------------------------
Joins?                  | All types            | Can embed documents,
                        |                      | more limited
------------------------+----------------------+-------------------------------
Priority:               | Data and transaction | Cloud-based applications
                        | security             |
------------------------+----------------------+-------------------------------
Scalability:            | Vertical and Hybrid  | Horizontal Scaling
                        | scaling              |
