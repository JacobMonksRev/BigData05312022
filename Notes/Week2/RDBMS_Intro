RDBMS

Relational Database Management System
- Database = A collection of data with a certain organization.
- RDBMS (Relational) regards the relationships between sets of data.
- Relational DBs usually organizae their data into tables.
- Tables contain rows (records) of data divided into columns.

Entity Relation Diagram (ERD)
- Visual representation of the relationships between tables.

Databases allow you to organize and structure your data.
Use a predefined schema to insert the data properly.

Multiplicity vs Cardinality
    Multiplicity refers to the relationships between data in the tables
    1:1 Two tables are associated with each other based on a single row
        Ex. Each person only has one social security number, and that SSN only belongs to one person
    1:n Two tables where a unique identifier in one table can be used multiple times in another
        Ex. One student can take many tests, One person can have multiple bank accounts.
    0:1 A table can refer to the data of another but doesn't not currently have the information.
        Ex. A person can be a doctor but not be a surgeon.
    n:n Two tables where many rows of one table cna have multiple matching rows in another.
        Ex. A student can have multiple teachers, and a teacher can have many students.

    Cardinality refers to the number of different data in the table(s)
    High cardinality means that there are a lot of different values / little repitition
    Low cardinality means that there are limited variety of values / a lot of repitition

ACID Properties
    The essential qualities that any RDBMS must have in order to function efficiently
    Describes how a transaction (a unit of work) functions in SQL
    A - Atomicity, All or Nothing approach
        Ex. Transaction
            first part: deducted funds from Person A's account
            second part: increased funds in Person B's account
            Atomicity means either BOTH of these occur or NEITHER of them do
    C - Consistency
            Ensures that the DB is properly updated with new information when a
            transaction is completed
    I - Isolation
            Ensures that no transactions can overlap or otherwise impact the execution of any other transaction
            Two transactions that utilize the same data cannot overlap or interfere with each other, they must occur sequentially, one after the other
    D - Durability
            A committed transaction will persist in the database indefinitely
            Ex. A system failure will not undo any completed transactions

Problems and Isolation Levels
Problems that can occur:
    1. Dirty Read: A query reads data that has not yet been committed. Results in inconsistent data
    2. Unrepeatable Read: transaction reads data once, then reads it again and gets a different value
        The data has been modified / deleted since the first read.
    3. Phantom Read: A transaction grabs a set of data two times, and the second time it finds a piece of data that didn't exist the first time.

    Isolation Levels:
        4 Main levels:
        Read uncommitted: allows Dirty Reads and phantom reads. The most insecure level.
        Read Committed: you may only read data from committed transactions, avoids dirty reads.
        Repeatable Reads: avoids unrepeatable reads by not allowing to read data that has not been committed.
        Serializeble: the most secure level, avoids phantom reads. Other transactions cannot insert new rows with
            key values that fall in the range of keys read by a currently ongoing transaciton.

    You can change the isolation level of your transactions by using:
        SET TRANSACTION ISOLATION LEVEL


Normalization
- A way to describe the redundancy or integrity of data in your database.
- The goal of normalization is to reduce redundancy and maximize integrity.

Different Levels of Normalization:

First Normal Form (1NF) - Each row must have a unique record (no duplicated rows), no single field in
                          a record can have more than 1 value
                        - EVERY column cannot be the same in any two records
Second Normal Form (2NF) - Table must already be in 1NF, any non-key column must be functionally
                           dependent on the key column
Third Normal Form (3NF) - Table must already be in 2NF, no transitive dependencies.
        Transitive Dependency means that the following are true:
                1. A -> B
                2. It is not the case that B -> A
                3. B -> C
            Ex. Three tables for employees at a company
                Table 1. Employee personal records, SSN, DoB, etc.
                Table 2. Hours worked in total per employee
                Table 3. Accrued paid time off based on hours worked
                Employee info can be used to find how many hours they worked, but it is NOT true that you can use hours worked to find the employee info. But hours worked is needed to obtain accrued PTO. This is a transitive dependency.
        In other words, to avoid transitive dependency, a non-key attribute (hours worked) should not determine any other non-key attribute (PTO).
Boyce-Codd Normal Form (BCNF) - Table is in 3NF, Primary Key is only single-column.
Fourth Normal Form (4NF) - Table is BCNF, it cannot contain more than one multi-varied attribute.
Fifth Normal Form (5NF) - Table is in 4NF, table cannot be broken down without loss of information.
Sixth Normal Form (6NF) - Table is in 5NF, and provides any further level of normalization not yet
                          included.

    YOU WILL BE EXPECTED TO KNOW the first 3 Normal Forms.

CRUD Operations: Create, Read, Update, Delete
- Standard operations that a DBMS needs to interact with data.
    Update: keyword in MySQL that allows you to edit a piece of data already inserted.
    UPDATE table_name SET col1 = 'value' WHERE student_id = 4
        - Best rule of thumb is to use the Primary Key in the WHERE clause.
        - That way the system will not be confused about what record you are changing.