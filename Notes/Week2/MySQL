SQL - Structured Query Language
- Our means of interacting with databases
- Made a standard language by the American National Standards Institute in 1986
Other types of query languages such as postgres SQL, MS Access, oracle, etc.

Documentation: https://dev.mysql.com/doc/

SQL allows users to:
1. access data in RDBMS.
2. describe/define the data.
3. manipulate data or create relationships.
4. embed into other languages.

SQL divided into 5 sublangauges
1. DDL - Data Definition Language
    - CREATE, ALTER, UPDATE, DROP

2. DML - Data manipulation Language
    - INSERT, UPDATE, DELETE

3. DCL - Data Control Language
    - GRANT, REVOKE

4. DQL - Data Query Language
    - SELECT

5. TCL - Transaction Control Language
    - COMMIT, ROLLBACK, SET TRANSACTION


Key words in SQL:

    CREATE DATABASE db_name;
    USE db_name;
    CREATE TABLE table_name (col1 datatype1, col2 datatype2, ...);
    DROP TABLE table_name;
    TRUNCATE table_name; - leaves the table structure in tact as opposed to DROP

    INSERT INTO table_name (col1, col2, ...) VALUES (data)
    UPDATE table_name SET col_name = "value" WHERE condition
    WHERE - creates a condition for the queried data to satisfy (<, >, LIKE, etc.)
    SELECT - how you access information
        SELECT (column names) FROM table_name (use '*' after SELECT if taking all columns)
    GROUP BY - a means of organizing the information being queried based on 1 or more columns
        HAVING - a way to further scrutinize the GROUP BY

        Aggregates: Combining data together to analyze its grouping in some way.
            SUM, MAX, MIN, LAST, FIRST, AVG, COUNT
            Most of the time, this is only possible with GROUP BY clauses
        Scalars: Changing each individual value.
            LCASE, UCASE, LEN (length), ROUND, CIEL, FLOOR
            FLOOR: 3.2 -> 3, 4.9 -> 4 (if there is a decimal, round down)
            CIEL: 3.2 -> 4, 4.9 -> 5 (if there is a decimal, round up)
    ORDER BY - only changes the view of the ouput based on some designated order.
        Default ASC (ascending), can also be DESC (descending)

    Order of Operations:
    A statement written like:
        SELECT * FROM table_name WHERE condition GROUP BY column HAVING condition ORDER BY column
    Will execute in the following order:
        1. FROM
        2. WHERE
        3. GROUP BY / HAVING
        4. SELECT
        5. ORDER BY

    LIKE - used in a WHERE clause for pattern matching
    ... WHERE col LIKE ...
    Arguments can be passed into LIKE to search for many different patterns.
    LIKE 'A%' - Searches for every item that starts with 'A'
        % indicates any number of characters
    LIKE '%A' - Searches for every item that ends with 'A'
    LIKE 'a%p' - Starts with 'a' ends with 'p'
    LIKE '_a%' - Second letter is 'a'
    LIKE '_____' - Any item with exactly 5 characters

    JOINS
    A way to perform analysis on multiple tables at a time
    Take columns from two (or more) different tables to create new rows.
    Tables need to have at least 1 column that are the same values.

    SELECT ... FROM table_name1 JOIN table_name2 ON table_name1.col = table_name2.col

    Types of JOINS:
        INNER JOIN - return all records that match in both tables
        RIGHT/LEFT OUTER JOINS - return all records that match AND all records from the RIGHT/LEFT table
        FULL OUTER JOIN - return all records in both tables IF there is a match in either left or right
        SELF JOIN - When you want to compare multiple columns from the same table to each other
        CROSS JOIN - return every record of the first table paired with every record of the second table.
            Ex. If you CROSS JOIN two tables with 10 records each, the result will be 100 records.

AS - Alias
Use AS when you want to rename a column in your output
Also use it in a query to make writing the query much less cumbersome
AS when you create a table, this will save the output of a query as a new table.
CREATE TABLE table_name AS (SELECT ...)

Nested Queries:
    You can make a SQL query more narrow and specific by performing a query inside of another:
    You can use a SELECT inside of a WHERE clause, FROM clause, or another SELECT clause.
        Ex. SELECT Names, gpa FROM Students WHERE gpa = (SELECT MAX(gpa) FROM Students)
        - This will first find the maximum gpa among all records in the table 'Students' and then
          find every record that contains that value for gpa.
    Also possible when using IN and NOT IN (see Set Operations)

Set Operations (Union, Intersect, Except):
UNION:
    (SELECT ...) UNION (SELECT ...)
    Combines rows from multiple places to create new columns
INTERSECT (IN in MySQL):
    SELECT ... WHERE column_name IN (SELECT ...)
    SELECT ... WHERE column_name IN (set of values)
    Grabs all records in the first select statement that match in the second
EXCEPT: (NOT IN in MySQL):
    SELECT ... WHERE columns_name NOT IN (SELECT ...) 
    SELECT ... WHERE column_name NOT IN (set of values)
    Grab all records in the first statement EXCEPT for those that appear in the second

Constraints:
    DISTINCT - seleting unique rows with no duplicates
        SELECT DISTINCT ...
    Creating a table with constraints:
        CREATE TABLE (
            student_id int, 
            name varchar(255), 
            GPA float,
            PRIMARY KEY(student_id)
            );
    PRIMARY KEY is a unique identifier for a record
        unique identifier -> Primary Keys cannot be repeated in the column
        AUTO INCREMENT - automatically creates new data according to the Primary Key.
            Ex. Column student_id is a Primary Key that starts automatically at 1,
                then increments to 2, 3, etc. 
                for each new record inserted into the table.
            CREATE TABLE (
                student_id int AUTO_INCREMENT, 
                name varchar(255), 
                GPA float,
                PRIMARY KEY (student_id)
            );
    FOREIGN KEY refers to a PRIMARY KEY in another table
        CREATE TABLE (
                student_id int, 
                name varchar(255), 
                GPA float,
                FOREIGN KEY (student_id) references table_name(column)        
                );
    PRIMARY and FOREIGN KEYS are how to create referential integrity between tables
        - "Referential Integrity" refers to the Foreign Key dependency on the Primary Key.
            - If a piece of data does not exist in the Primary Key, the Foreign Key cannot reference it.
            - If data is referred to in the Foreign Key, it cannot be deleted from the Primary Key.
        - This ensures that data is consistent across the database
    UNIQUE - set this constraint on a column when creating a table
        CREATE TABLE (
                student_id int UNIQUE, 
                name varchar(255), 
                GPA float,    
                );
    DEFAULT - set a default value for a column when given no data
        CREATE TABLE (
                student_id int, 
                name varchar(255), 
                GPA float DEFAULT NULL,
                FOREIGN KEY (student_id) references table_name(column)        
                );
    NOT - sets a restriction on what values can be in the data
        CREATE TABLE (
                student_id int, 
                name varchar(255), 
                GPA float NOT NULL,
                FOREIGN KEY (student_id) references table_name(column)        
                );
    CHECK - sets a resictive check on data inserted into the table
        CREATE TABLE (
                student_id int, 
                name varchar(255), 
                GPA float,
                CHECK (0 <= GPA <= 4)    
                );
VIEWS
- A virtual table that does not exist physically.
- based on the result set of a SELECT statement.
    CREATE VIEW view_name AS (SELECT ...);
    DROP View view_name;

    UPDATE:
    Some criteria to keep in mind when updating a View
    1. Select statement used to create the view should not contain GROUP BY clauses
    2. There should be no DISTINCT constraint in the SELECT
    3. View should not be made from multiple tables (through a JOIN clause or otherwise)
    4. Views should not have NOT NULL values
    5. Views should not be made from nested queries

    CREATE OR REPLACE VIEW view_name

    Reasons for using a VIEW
    1. Have an additional layer of security on tables and data.
    2. Giving different people different data to observe (ex. on a public website)
    3. Store complex queries and save the output for ease of access and speed
    4. Allow you to hide the complexity of your query

INDEXING
    A way to organize the information in tables to make them easier to access and read.
    - Faster reads, but slower writes.
    Takes a column in your table and organize the information virtually according to the data in that column.
    Ex. Table full of cities and the countries that they are in. index on the Country name, 
    that way the search knows ahead of time where to look, which means faster access.

    CREATE INDEX index_name ON table_name (column1, column2, ...)
    DROP INDEX index_name;

    When to use an Index:
        A column has a lot of variety (high cardinality) in the data stored there.
        A table has a large number of records
        When you use JOINS to combine columns frequently.
    
    When NOT to use Indexes:
        A column has little variety (low cardinality)
        A table is very small
